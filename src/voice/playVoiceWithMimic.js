// üîÅ –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É —Ü–∏–∫–ª—É: —Å–ª—É—Ö–∞—î ‚Üí –≥–æ–≤–æ—Ä–∏—Ç—å ‚Üí —Å–ª—É—Ö–∞—î

import * as THREE from 'three';
import { setTalking } from '../avatar/state';
import { startSpeakingBodyMovements } from '../avatar/speakingMimic.js';
import { resetRightHandPose } from '../avatar/utils/resetRightHandPose.js';

/**
 * –ü—Ä–æ–≥—Ä–∞—î –æ–∑–≤—É—á–∫—É —Ç–µ–∫—Å—Ç—É —Ç–∞ –∞–Ω—ñ–º—É—î —Ä–æ—Ç —á–µ—Ä–µ–∑ –≥—É—á–Ω—ñ—Å—Ç—å –∞—É–¥—ñ–æ
 * @param {string} audioUrl - URL –¥–æ –∞—É–¥—ñ–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥ ElevenLabs)
 * @param {THREE.Mesh} faceMesh - –º–µ—à —ñ–∑ morphTargetDictionary —Ç–∞ morphTargetInfluences
 * @param {THREE.Object3D} avatar - –ø–æ–≤–Ω–∞ –º–æ–¥–µ–ª—å, –∑ —è–∫–æ—ó –≤–∏—Ç—è–≥—É—î—Ç—å—Å—è —â–µ–ª–µ–ø–∞
 * @returns {Promise} - –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–≤—É–∫—É
 */
export async function playVoiceWithMimic(audioUrl, faceMesh, avatar, onStartSpeaking = () => {}) {
  return new Promise(async (resolve) => {
    const audio = new Audio(audioUrl);
    audio.preload = 'auto';
    audio.volume = 1.0;

    const mouthOpenKey = 'A25_Jaw_Open';
    const dict = faceMesh.morphTargetDictionary;
    const infl = faceMesh.morphTargetInfluences;
    const mouthIndex = dict[mouthOpenKey];

    const jaw = avatar.getObjectByName('mixamorigJawRoot');

    if (mouthIndex === undefined || !jaw) {
      audio.play();
      audio.onended = resolve;
      return;
    }

    const context = new AudioContext();
    const src = context.createMediaElementSource(audio);
    const analyser = context.createAnalyser();
    analyser.fftSize = 512;
    const dataArray = new Uint8Array(analyser.frequencyBinCount);

    src.connect(analyser);
    analyser.connect(context.destination);

    const baseJaw = Math.PI / 2;
    const jawAmplitude = 0.2;

    const animate = () => {
      analyser.getByteFrequencyData(dataArray);
      const volume = dataArray.reduce((a, b) => a + b, 0) / dataArray.length / 255;

      infl[mouthIndex] = volume * 3.7;
      jaw.rotation.x = baseJaw + volume * jawAmplitude;

      if (!audio.paused && !audio.ended) {
        requestAnimationFrame(animate);
      } else {
        infl[mouthIndex] = 0;
        jaw.rotation.x = baseJaw;
        setTalking(false);
        resolve(); // üîÅ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è ‚Äî –≤–∞–∂–ª–∏–≤–æ –¥–ª—è —Ü–∏–∫–ª—É
      }
    };

    await new Promise(resolve => {
      audio.addEventListener('loadedmetadata', resolve);
    });

    // üîπ –î–æ–¥–∞—î–º–æ –∂–∏–≤—ñ —Ä—É—Ö–∏ —Ç—ñ–ª–∞ –¥–æ –≥–æ–ª–æ—Å—É
    startSpeakingBodyMovements(faceMesh, avatar);

    audio.play().then(() => {
      context.resume();
      setTalking(true);
      onStartSpeaking();

    // –ñ–µ—Å—Ç –∫—Ä—É—Ç—ñ–Ω–Ω—è —Ä—É–∫–æ—é)
      // setTimeout(() => {
      //   requestAnimationFrame(() => {
      //     resetRightHandPose(avatar); 
      //     import('/src/gestures/gestureExplainWithHand.js')
      //       .then(m => m.gestureExplainWithHand(avatar));
      //   });
      // }, 2500);

      // –ñ–µ—Å—Ç –£–≤–∞–≥–∞!!! –≤–µ–ª–∏–∫–∏–π –ø–∞–ª–µ—Ü—å)
      setTimeout(() => {
        requestAnimationFrame(() => {
          resetRightHandPose(avatar); 
          import('/src/gestures/gestureAttentionWithFinger.js')
            .then(m => m.gestureAttentionWithFinger(avatar));
        });
      }, 2500);


      animate();
    }).catch(err => {
      console.error('üéµ –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–≥—Ä–∞—Ç–∏ –∞—É–¥—ñ–æ:', err);
      setTalking(false);
      resolve();
    });
  });
}
