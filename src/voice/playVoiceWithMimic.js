
import * as THREE from 'three';

/**
 * ะัะพะณัะฐั ะพะทะฒััะบั ัะตะบััั ัะฐ ะฐะฝัะผัั ัะพั ัะตัะตะท ะณััะฝัััั ะฐัะดัะพ
 * @param {string} audioUrl - URL ะดะพ ะฐัะดัะพ (ะฝะฐะฟัะธะบะปะฐะด, ะฒัะด ElevenLabs)
 * @param {THREE.Mesh} faceMesh - ะผะตั ัะท morphTargetDictionary ัะฐ morphTargetInfluences
 * @param {THREE.Object3D} avatar - ะฟะพะฒะฝะฐ ะผะพะดะตะปั, ะท ัะบะพั ะฒะธััะณัััััั ัะตะปะตะฟะฐ
 */
export async function playVoiceWithMimic(audioUrl, faceMesh, avatar) {
  const audio = new Audio(audioUrl);
  audio.preload = 'auto'; // โ ะฒะฐะถะปะธะฒะพ
  audio.volume = 1.0;

  // ๐ฃ Shape key
  const mouthOpenKey = 'A25_Jaw_Open';
  const dict = faceMesh.morphTargetDictionary;
  const infl = faceMesh.morphTargetInfluences;
  const mouthIndex = dict[mouthOpenKey];

  if (mouthIndex === undefined) {
    console.warn(`โ Shape key '${mouthOpenKey}' ะฝะต ะทะฝะฐะนะดะตะฝะพ`);
    audio.play();
    return;
  }

  // ๐ฆด ะฉะตะปะตะฟะฝะฐ ะบัััะบะฐ
  const jaw = avatar.getObjectByName('mixamorigJawRoot');
  if (!jaw) {
    console.warn('โ ะฉะตะปะตะฟะฝะฐ ะบัััะบะฐ ะฝะต ะทะฝะฐะนะดะตะฝะฐ');
    audio.play();
    return;
  }

  // ๐ ะัะดัะพ-ะฐะฝะฐะปััะธะบะฐ
  const context = new AudioContext();
  const src = context.createMediaElementSource(audio);
  const analyser = context.createAnalyser();
  analyser.fftSize = 512;
  const dataArray = new Uint8Array(analyser.frequencyBinCount);

  src.connect(analyser);
  analyser.connect(context.destination);

  // ๐ ะะฝัะผะฐััั ะผัะผัะบะธ
  const baseJaw = Math.PI / 2;     // ะะฐะทะพะฒะธะน ะบัั ะทะฐะบัะธัะพะณะพ ัะพัะฐ
  const jawAmplitude = 0.2;        // ะะฐะบัะธะผะฐะปัะฝะต ะฒัะดะบัะธะฒะฐะฝะฝั ัะตะปะตะฟะธ

  const animate = () => {
    analyser.getByteFrequencyData(dataArray);
    const volume = dataArray.reduce((a, b) => a + b, 0) / dataArray.length / 255;

    infl[mouthIndex] = volume * 3.7;

    jaw.rotation.x = baseJaw + volume * jawAmplitude;

    if (!audio.paused && !audio.ended) {
      requestAnimationFrame(animate);
    } else {
      infl[mouthIndex] = 0;
      jaw.rotation.x = baseJaw; // ะะพะฒะตััะฐัะผะพ ั ะทะฐะบัะธัะธะน ััะฐะฝ
    }
  };

  // โถ๏ธ ะััะบ
  console.time('โฑ๏ธ AUDIO PLAY DELAY');

audio.play().then(() => {
  console.timeEnd('โฑ๏ธ AUDIO PLAY DELAY'); // ะฟะพะบะฐะถะต, ัะบัะปัะบะธ ะผั ะฟัะพะนัะปะพ

  context.resume();
  animate();
}).catch(err => {
    console.error('๐ต ะะต ะฒะดะฐะปะพัั ะฟัะพะณัะฐัะธ ะฐัะดัะพ:', err);
  });
}
