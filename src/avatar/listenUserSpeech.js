/**
 * –ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–∑–≤–æ–ª—É –Ω–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω —ñ –ø–æ—á–∏–Ω–∞—î —Å–ª—É—Ö–∞—Ç–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≥–æ–¥–∏–≤—Å—è
 */

let isFirstMessage = true;

export function promptMicrophoneAccess() {
  const micBtn = document.createElement('button');
  micBtn.textContent = 'üé§ Allow microphone';
  micBtn.id = 'mic-permission-btn';

  // –°—Ç–∏–ª—ñ ‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≥–∞—Ä–Ω–∏–π –≤–∏–≥–ª—è–¥
  Object.assign(micBtn.style, {
    position: 'absolute',
    bottom: '70px',
    left: '50%',
    transform: 'translateX(-50%)',
    padding: '12px 20px',
    fontSize: '18px',
    background: '#111',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    cursor: 'pointer',
    zIndex: 9999
  });

  document.body.appendChild(micBtn);

  micBtn.addEventListener('click', async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

      console.log('üé§ –î–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞–¥–∞–Ω–æ');
      micBtn.remove();

      listenToSpeech(stream); // ‚è≥ –î–∞–ª—ñ: —Å–ª—É—Ö–∞—î–º–æ –≥–æ–ª–æ—Å (—Ä–µ–∞–ª—ñ–∑—É—î–º–æ –æ–∫—Ä–µ–º–æ)
    } catch (err) {
      console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞:', err);
      alert('–ú—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –Ø –Ω–µ –∑–º–æ–∂—É —Ç–µ–±–µ –ø–æ—á—É—Ç–∏ üò¢');
    }
  });
}

/**
 * –ó–∞–ø–∏—Å—É—î –≥–æ–ª–æ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ webm —ñ –≤–∏–≤–æ–¥–∏—Ç—å –ª–æ–≥ –ø—Ä–æ –∑–∞–ø–∏—Å
 */
let lastUserText = '';

function listenToSpeech(stream) {
  console.log('üéôÔ∏è –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–∏—Å –≥–æ–ª–æ—Å—É...');

  const mediaRecorder = new MediaRecorder(stream);
  const audioChunks = [];

  const audioContext = new AudioContext();
  const source = audioContext.createMediaStreamSource(stream);
  const analyser = audioContext.createAnalyser();
  analyser.fftSize = 512;
  source.connect(analyser);

  const silenceThreshold = 0.01;
  let speaking = false;
  let lastSpokeTime = null;
  let initialSilenceTimer = null;

  const checkSilence = () => {
    const data = new Uint8Array(analyser.fftSize);
    analyser.getByteTimeDomainData(data);

    let sum = 0;
    for (let i = 0; i < data.length; i++) {
      let value = (data[i] - 128) / 128;
      sum += value * value;
    }
    const rms = Math.sqrt(sum / data.length);
    const now = Date.now();

    if (rms > silenceThreshold) {
      if (!speaking) {
        console.log('üîä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –≥–æ–≤–æ—Ä–∏—Ç–∏');
        speaking = true;

        // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ 10 —Å–µ–∫, –±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≥–æ–≤–æ—Ä–∏–≤
        if (initialSilenceTimer) {
          clearTimeout(initialSilenceTimer);
          initialSilenceTimer = null;
        }
      }

      lastSpokeTime = now;

    } else if (speaking && lastSpokeTime && now - lastSpokeTime > 3000) {
      console.log('ü§ê –¢–∏—à–∞ –ø–æ–Ω–∞–¥ 3 —Å–µ–∫ ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å');
      stopAll();
    }
  };

  const silenceInterval = setInterval(checkSilence, 200);

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–∫–∞–∂–µ –ø—Ä–æ—Ç—è–≥–æ–º 10 —Å–µ–∫—É–Ω–¥ ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ
  initialSilenceTimer = setTimeout(() => {
    if (!speaking) {
      console.log('‚åõ –ù—ñ—á–æ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–≤ –∑–∞ 10 —Å–µ–∫ ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å');
      stopAll();
    }
  }, 10000);

  const stopAll = () => {
    clearInterval(silenceInterval);
    clearTimeout(initialSilenceTimer);
    mediaRecorder.stop();
    audioContext.close();
  };

  mediaRecorder.ondataavailable = (event) => {
    audioChunks.push(event.data);
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ —à–º–∞—Ç–æ–∫ –∞—É–¥—ñ–æ:', event.data);
  };

  mediaRecorder.onstop = () => {
    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
    console.log('‚úÖ –ó–∞–ø–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Blob:', audioBlob);
    console.log('üßæ –¢–∏–ø:', audioBlob.type, '–†–æ–∑–º—ñ—Ä:', audioBlob.size, '–±–∞–π—Ç');

    const timestamp = new Date().toISOString();
    console.log('üïì Timestamp –∑–∞–ø–∏—Å—É:', timestamp);

    const formData = new FormData();
    formData.append('audio', audioBlob, `voice-${timestamp}.webm`);
    formData.append('timestamp', timestamp);

    if (isFirstMessage) {
      console.log('üì® –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞ –ø–æ—à—Ç—É + Speech-to-Text');

      fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/proxy.php', {
        method: 'POST',
        body: formData
      })
        .then(response => response.json())
        .then(data => console.log('üì¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ proxy.php (email):', data))
        .catch(error => console.error('‚ùå Email error:', error));

      fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/speechToText.php', {
        method: 'POST',
        body: formData
      })
        .then(res => res.json())
        .then(data => {
          if (data.status === 'error') {
            console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ speechToText.php:', data.message);
            alert('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòä');
            return;
          }

          lastUserText = data.text;
          console.log('üìå –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', lastUserText);
          handleFirstUserText(lastUserText);
        })
        .catch(err => console.error('‚ùå Speech-to-Text –ø–æ–º–∏–ª–∫–∞:', err));

      isFirstMessage = false;
    } else {
      console.log('üó£Ô∏è –ù–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: —Ç—ñ–ª—å–∫–∏ Speech-to-Text');

      fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/speechToText.php', {
        method: 'POST',
        body: formData
      })
        .then(res => res.json())
        .then(data => {
          console.log('üìù Speech-to-Text —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', data);
        })
        .catch(err => console.error('‚ùå Speech-to-Text –ø–æ–º–∏–ª–∫–∞:', err));
    }
  };

  mediaRecorder.start();
  console.log('‚è∫Ô∏è –ó–∞–ø–∏—Å –∑–∞–ø—É—â–µ–Ω–æ');
}


function handleFirstUserText(text) {
  console.log('ü§ñ –ì–æ—Ç—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ GPT –∑ —Ç–µ–∫—Å—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', text);

  fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/questionAnswer.php', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ question: text })
  })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'error') {
        console.error('‚ùå GPT error:', data.message);
        alert('GPT –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ üò¢');
        return;
      }

      console.log('‚úÖ GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—å:', data.answer);

      fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/tts.php', {
        method: 'POST',
        body: new URLSearchParams({ text: data.answer })
      })
        .then(response => {
          if (!response.ok) {
            throw new Error(`üõë HTTP error! status: ${response.status}`);
          }
          console.log('üîä –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ tts.php (mp3 stream)');
          return response.blob();
        })
        .then(audioBlob => {
          console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ MP3-—Ñ–∞–π–ª –≤—ñ–¥ ElevenLabs. –†–æ–∑–º—ñ—Ä:', audioBlob.size, '–±–∞–π—Ç');

          const audioURL = URL.createObjectURL(audioBlob);
          const audio = new Audio(audioURL);

          // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ—Å
          audio.play().then(() => {
            console.log('‚ñ∂Ô∏è –ì–æ–ª–æ—Å –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è...');
          }).catch(err => {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É:', err);
          });

          // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º—ñ–º—ñ–∫—É (—è–∫—â–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞)
          if (typeof startMouthMovement === 'function') {
            startMouthMovement(audio);
            console.log('üó£Ô∏è –ê–Ω—ñ–º–∞—Ü—ñ—è —Ä–æ—Ç–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞');
          } else {
            console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è startMouthMovement –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
          }
        })
        .catch(err => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ tts.php:', err);
          alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–∑–≤—É—á–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
        });

    })
    .catch(err => {
      console.error('‚ùå GPT fetch –ø–æ–º–∏–ª–∫–∞:', err);
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT');
    });
}





