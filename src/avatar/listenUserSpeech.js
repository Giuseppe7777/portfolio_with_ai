/**
 * –ü–æ–∫–∞–∑—É—î –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–∑–≤–æ–ª—É –Ω–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω —ñ –ø–æ—á–∏–Ω–∞—î —Å–ª—É—Ö–∞—Ç–∏, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≥–æ–¥–∏–≤—Å—è
 */
export function promptMicrophoneAccess() {
  const micBtn = document.createElement('button');
  micBtn.textContent = 'üé§ Allow microphone';
  micBtn.id = 'mic-permission-btn';

  // –°—Ç–∏–ª—ñ ‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≥–∞—Ä–Ω–∏–π –≤–∏–≥–ª—è–¥
  Object.assign(micBtn.style, {
    position: 'absolute',
    bottom: '70px',
    left: '50%',
    transform: 'translateX(-50%)',
    padding: '12px 20px',
    fontSize: '18px',
    background: '#111',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    cursor: 'pointer',
    zIndex: 9999
  });

  document.body.appendChild(micBtn);

  micBtn.addEventListener('click', async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

      console.log('üé§ –î–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞–¥–∞–Ω–æ');
      micBtn.remove();

      listenToSpeech(stream); // ‚è≥ –î–∞–ª—ñ: —Å–ª—É—Ö–∞—î–º–æ –≥–æ–ª–æ—Å (—Ä–µ–∞–ª—ñ–∑—É—î–º–æ –æ–∫—Ä–µ–º–æ)
    } catch (err) {
      console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞:', err);
      alert('–ú—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –Ø –Ω–µ –∑–º–æ–∂—É —Ç–µ–±–µ –ø–æ—á—É—Ç–∏ üò¢');
    }
  });
}

/**
 * –ó–∞–ø–∏—Å—É—î –≥–æ–ª–æ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ webm —ñ –≤–∏–≤–æ–¥–∏—Ç—å –ª–æ–≥ –ø—Ä–æ –∑–∞–ø–∏—Å
 */
function listenToSpeech(stream) {
  console.log('üéôÔ∏è –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–∏—Å –≥–æ–ª–æ—Å—É...');

  const mediaRecorder = new MediaRecorder(stream);
  const audioChunks = [];

  mediaRecorder.ondataavailable = (event) => {
    audioChunks.push(event.data);
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ —à–º–∞—Ç–æ–∫ –∞—É–¥—ñ–æ:', event.data);
  };

  mediaRecorder.onstop = () => {
    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
    console.log('‚úÖ –ó–∞–ø–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Blob:', audioBlob);
    console.log('üßæ –¢–∏–ø:', audioBlob.type, '–†–æ–∑–º—ñ—Ä:', audioBlob.size, '–±–∞–π—Ç');
  
    // üïì –§–æ—Ä–º—É—î–º–æ timestamp
    const timestamp = new Date().toISOString();
    console.log('üïì Timestamp –∑–∞–ø–∏—Å—É:', timestamp);
  
    // üì¶ –§–æ—Ä–º—É—î–º–æ FormData
    const formData = new FormData();
    formData.append('audio', audioBlob, `voice-${timestamp}.webm`);
    formData.append('timestamp', timestamp);
  
    // üöÄ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/proxy.php', {
      method: 'POST',
      body: formData
    })
      .then(response => response.json()) // üü¢ —Ç–µ–ø–µ—Ä –æ—á—ñ–∫—É—î–º–æ JSON, –Ω–µ —Ç–µ–∫—Å—Ç!
      .then(data => {
        console.log('üì¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ proxy.php:', data);
      })
      .catch(error => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
      });
  };
  

  mediaRecorder.start();
  console.log('‚è∫Ô∏è –ó–∞–ø–∏—Å –∑–∞–ø—É—â–µ–Ω–æ');

  // ‚è±Ô∏è –û–±–º–µ–∂—É—î–º–æ –∑–∞–ø–∏—Å –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç—É
  setTimeout(() => {
    mediaRecorder.stop();
    console.log('üõë –ü—Ä–∏–º—É—Å–æ–≤–æ –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥');
  }, 5000);
}
