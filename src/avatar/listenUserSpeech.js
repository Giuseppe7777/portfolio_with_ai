import { playVoiceWithMimic } from "../voice/playVoiceWithMimic";
import { setMicStream, getConversationActive } from './state.js';

let faceMesh = null;
let avatar = null;
let micStream = null;
let silenceCount = 0;
let skipSTT = false;
let isFinalSilence = false;
let lastUserText = '';
let lastRealUserText = '';

export function setAvatarContext(mesh, model) {
  faceMesh = mesh;
  avatar = model;
}

export function promptMicrophoneAccess() {
  const micBtn = document.createElement('button');
  micBtn.textContent = 'üé§ Allow microphone';
  micBtn.id = 'mic-permission-btn';

  Object.assign(micBtn.style, {
    position: 'absolute',
    bottom: '70px',
    left: '50%',
    transform: 'translateX(-50%)',
    padding: '12px 20px',
    fontSize: '18px',
    background: '#111',
    color: 'white',
    border: '2px solid white',
    borderRadius: '10px',
    cursor: 'pointer',
    zIndex: 9999
  });

  document.body.appendChild(micBtn);

  micBtn.addEventListener('click', async () => {
    try {
      micStream = await navigator.mediaDevices.getUserMedia({ audio: true });
      setMicStream(micStream);
      console.log('üé§ –î–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞–¥–∞–Ω–æ');
      micBtn.remove();
      if (!micStream || micStream.getTracks().some(t => t.readyState === 'ended')) {
        console.warn('üé§ –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –≤–∏–º–∫–Ω–µ–Ω–æ. –°–ª—É—Ö–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
        return;
      }
      listenToSpeech(micStream);
    } catch (err) {
      console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞:', err);
      alert('–ú—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –Ø –Ω–µ –∑–º–æ–∂—É —Ç–µ–±–µ –ø–æ—á—É—Ç–∏ üò¢');
    }
  });
}

function listenToSpeech(stream) {
  console.log('üéôÔ∏è –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–∏—Å –≥–æ–ª–æ—Å—É...');

  const mediaRecorder = new MediaRecorder(stream);
  const audioChunks = [];

  const audioContext = new AudioContext();
  const source = audioContext.createMediaStreamSource(stream);
  const analyser = audioContext.createAnalyser();
  analyser.fftSize = 512;
  source.connect(analyser);

  const silenceThreshold = 0.01;
  let speaking = false;
  let lastSpokeTime = null;
  let initialSilenceTimer = null;

  const checkSilence = () => {
    const data = new Uint8Array(analyser.fftSize);
    analyser.getByteTimeDomainData(data);

    let sum = 0;
    for (let i = 0; i < data.length; i++) {
      let value = (data[i] - 128) / 128;
      sum += value * value;
    }
    const rms = Math.sqrt(sum / data.length);
    const now = Date.now();

    if (rms > silenceThreshold) {
      if (!speaking) {
        console.log('üîä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –≥–æ–≤–æ—Ä–∏—Ç–∏');
        speaking = true;
        if (initialSilenceTimer) {
          clearTimeout(initialSilenceTimer);
          initialSilenceTimer = null;
        }
      }
      lastSpokeTime = now;
    } else if (speaking && lastSpokeTime && now - lastSpokeTime > 2500) {
      console.log('ü§ê –¢–∏—à–∞ –ø–æ–Ω–∞–¥ 2.5 —Å–µ–∫ ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å');
      stopAll();
    }
  };

  const silenceInterval = setInterval(checkSilence, 200);

  initialSilenceTimer = setTimeout(() => {
    if (!speaking) {
      console.log('‚åõ –ù—ñ—á–æ–≥–æ –Ω–µ —Å–∫–∞–∑–∞–≤ –∑–∞ 10 —Å–µ–∫ ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–ø–∏—Å');
      stopAll();
    }
  }, 10000);

  const stopAll = () => {
    clearInterval(silenceInterval);
    clearTimeout(initialSilenceTimer);
    audioContext.close();

    if (!speaking) {
      silenceCount++;
      skipSTT = true;
      console.log(`ü§ê –í–∏—è–≤–ª–µ–Ω–æ —Ç–∏—à—É. –ú–æ–≤—á–∞–Ω–æ–∫ –ø–æ—Å–ø—ñ–ª—å: ${silenceCount}`);

      if (silenceCount === 1) {
        console.log('üü° –ü–µ—Ä—à–∞ –º–æ–≤—á–∞–Ω–∫–∞ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ __SILENCE__1 –¥–æ GPT');
        handleFirstUserText('__SILENCE__1');
      } else if (silenceCount === 2) {
        console.log('üî¥ –î—Ä—É–≥–∞ –º–æ–≤—á–∞–Ω–∫–∞ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ __SILENCE__2 –¥–æ GPT');
        handleFirstUserText('__SILENCE__2');
      }
      return;
    }

    console.log('üó£Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–æ—Å—å —Å–∫–∞–∑–∞–≤ ‚Äî –æ–±–Ω—É–ª—è—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –º–æ–≤—á–∞–Ω–æ–∫');
    silenceCount = 0;
    mediaRecorder.stop();
  };

  mediaRecorder.ondataavailable = (event) => {
    audioChunks.push(event.data);
    console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ —à–º–∞—Ç–æ–∫ –∞—É–¥—ñ–æ:', event.data);
  };

  mediaRecorder.onstop = () => {
    if (!getConversationActive()) {
      console.warn('üõë –†–æ–∑–º–æ–≤–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ onstop –ø–æ–≤–Ω—ñ—Å—Ç—é');
      return;
    }

    if (skipSTT) {
      console.warn('üõë –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ STT ‚Äî —Ü–µ –±—É–ª–∞ –º–æ–≤—á–∞–Ω–∫–∞');
      skipSTT = false;
      return;
    }

    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
    if (audioBlob.size === 0) {
      console.warn('‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π –∞—É–¥—ñ–æ-—Ñ–∞–π–ª. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è.');
      return;
    }

    const timestamp = new Date().toISOString();

    console.log('‚úÖ –ó–∞–ø–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. Blob:', audioBlob);
    console.log('üïì Timestamp –∑–∞–ø–∏—Å—É:', timestamp);

    const formData = new FormData();
    formData.append('audio', audioBlob, `voice-${timestamp}.webm`);
    formData.append('timestamp', timestamp);

    console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞—É–¥—ñ–æ –Ω–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏...');

    fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/speechToText.php', {
      method: 'POST',
      body: formData
    })
      .then(res => res.json())
      .then(data => {
        if (data.status === 'error') {
          console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ speechToText.php:', data.message);
          alert('–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòä');
          return;
        }

        lastUserText = data.text;
        lastRealUserText = lastUserText;
        console.log('üìå –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', lastUserText);

        if (lastUserText === '__SILENCE__1') {
          const prompt = `${lastRealUserText} - –≤–∏–∑–Ω–∞—á —è–∫–∞ —Ü–µ –º–æ–≤–∞ —ñ –≤—Å—Ç–∞–Ω–æ–≤–∏ —ó—ó —è–∫ –º–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç—ñ–ª—å–∫–∏ —Ü—å–æ–≥–æ —Ä–∞–∑—É. –¶—é –º–æ–≤—É —Ç—Ä–µ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–ª—è —Ç–æ–≥–æ –∞–±–∏ —Å–∫–∞–∑–∞—Ç–∏ —â–æ —Ç–∏ –Ω–µ –ø–æ—á—É–≤ –Ω—ñ—è–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è —ñ –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ –ø—Ä–æ —è–∫–µ—Å—å –ø–∏—Ç–∞–Ω–Ω—è. –¢–æ–±—Ç–æ –∑–∞—Ä–∞–∑ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ —Å–∫–∞–∑–∞—Ç–∏, —â–æ —Ç–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ—á—É–≤ —ñ –ø–æ–ø—Ä–æ—Å–∏ —â–æ—Å—å —Å–∫–∞–∑–∞—Ç–∏ –∞–±–æ –∑–∞–ø–∏—Ç–∞—Ç–∏`;
          isFinalSilence = false;
          askGPTAndSpeak(prompt);
        } else if (lastUserText === '__SILENCE__2') {
          const prompt = `${lastRealUserText} - –≤–∏–∑–Ω–∞—á —è–∫–∞ —Ü–µ –º–æ–≤–∞ –≤–∏–∫–ª—é—á–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Ü—ñ—î—é –º–æ–≤–æ—é —Å–∫–∞–∑–∞—Ç–∏, —â–æ —Ç–∏ –¥—è–∫—É—î—à –∑–∞ —Ä–æ–∑–º–æ–≤—É, –±–∞–∂–∞—î—à –≤—Å—å–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —ñ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É.`;
          isFinalSilence = true;
          askGPTAndSpeak(prompt);
        } else {
          handleFirstUserText(lastUserText);
        }
      })
      .catch(err => console.error('‚ùå Speech-to-Text –ø–æ–º–∏–ª–∫–∞:', err));
  };

  mediaRecorder.start();
  console.log('‚è∫Ô∏è –ó–∞–ø–∏—Å –∑–∞–ø—É—â–µ–Ω–æ');
}

function handleFirstUserText(text) {
  if (!getConversationActive()) {
    console.warn('üõë –†–æ–∑–º–æ–≤–∞ –±—É–ª–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –¥–æ GPT-–∑–∞–ø–∏—Ç—É ‚Äî –Ω–µ –∑–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ GPT.');
    return;
  }

  if (!text || text.trim() === '' || text === 'undefined') {
    console.warn('‚ö†Ô∏è –¢–µ–∫—Å—Ç –ø—É—Å—Ç–∏–π –∞–±–æ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π. –ù–µ –∑–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ GPT.');
    return;
  }

  fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/questionAnswer.php', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      question: `–¢–µ–∫—Å—Ç: "${text}". –¶–µ –ø—Ä–æ—â–∞–ª—å–Ω–∞ —Ñ—Ä–∞–∑–∞? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò "yes" –∞–±–æ "no".`
    })
  })
    .then(res => res.json())
    .then(data => {
      if (data.status === 'error') {
        console.error('‚ùå GPT error –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—Ä–æ—â–∞–Ω–Ω—è:', data.message);
        return;
      }

      const isGoodbye = data.answer.trim().toLowerCase().includes('yes');
      if (isGoodbye) {
        console.log('üëã GPT –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤: —Ü–µ –ø—Ä–æ—â–∞–ª—å–Ω–∞ —Ñ—Ä–∞–∑–∞');

        isFinalSilence = true;

        const goodbyePrompt = `"${text}" ‚Äî –≤–∏–∑–Ω–∞—á –º–æ–≤—É —Ü—ñ—î—ó —Ñ—Ä–∞–∑–∏ —ñ –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï –¢–Ü–Ñ–Æ –ú–û–í–û–Æ. –°–∫–∞–∂–∏ –≤–≤—ñ—á–ª–∏–≤–æ, —â–æ –¥—è–∫—É—î—à –∑–∞ —Ä–æ–∑–º–æ–≤—É, –±–∞–∂–∞—î—à —É—Å—å–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —ñ —Å–ø–æ–¥—ñ–≤–∞—î—à—Å—è –ø–æ–±–∞—á–∏—Ç–∏ –ª—é–¥–∏–Ω—É –∑–Ω–æ–≤—É. –£ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ù–ï –ú–û–ñ–ù–ê –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∂–æ–¥–Ω–æ—ó —ñ–Ω—à–æ—ó –º–æ–≤–∏.`;

        askGPTAndSpeak(goodbyePrompt);
      } else {
        console.log('üôÇ –¶–µ –Ω–µ –ø—Ä–æ—â–∞–ª—å–Ω–∞ —Ñ—Ä–∞–∑–∞. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –¥—ñ–∞–ª–æ–≥.');
        isFinalSilence = false;
        askGPTAndSpeak(text);
      }
    })
    .catch(err => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–∞ –ø—Ä–æ—â–∞–Ω–Ω—è:', err);
    });
}

function askGPTAndSpeak(text) {
  fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/questionAnswer.php', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ question: text })
  })
    .then(response => response.json())
    .then(data => {
      if (data.status === 'error') {
        console.error('‚ùå GPT error:', data.message);
        alert('GPT –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ üò¢');
        return;
      }

      console.log('‚úÖ GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—å:', data.answer);

      fetch('http://localhost/my-portfolio-fullstack-ai/my-portfolio-fullstack-ai/php/tts.php', {
        method: 'POST',
        body: new URLSearchParams({ text: data.answer })
      })
        .then(response => {
          if (!response.ok) throw new Error(`üõë HTTP error! status: ${response.status}`);
          return response.blob();
        })
        .then(audioBlob => {
          const audioURL = URL.createObjectURL(audioBlob);
          const audio = new Audio(audioURL);

          if (!getConversationActive()) {
            console.warn('üõë –†–æ–∑–º–æ–≤–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ—Å.');
            return;
          }

          if (faceMesh && avatar) {
            playVoiceWithMimic(audioURL, faceMesh, avatar).then(() => {
              console.log('üîÅ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è...');

              if (isFinalSilence) {
                console.log('üëã –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ü–µ–Ω—É –ø—ñ—Å–ª—è –ø—Ä–æ—â–∞–Ω–Ω—è');
                import('./avatar-entry.js').then(module => module.stopConversation());
                return;
              }

              if (!micStream || micStream.getTracks().some(t => t.readyState === 'ended')) {
                console.warn('üé§ –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –≤–∏–º–∫–Ω–µ–Ω–æ. –°–ª—É—Ö–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
                return;
              }

              listenToSpeech(micStream);
            });
          } else {
            audio.play().then(() => {
              console.log('‚ñ∂Ô∏è –ì–æ–ª–æ—Å –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è (–±–µ–∑ –º—ñ–º—ñ–∫–∏)...');
            });
          }
        })
        .catch(err => {
          console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–µ–Ω–Ω—ñ:', err);
          alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–∑–≤—É—á–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
        });
    })
    .catch(err => {
      console.error('‚ùå GPT fetch –ø–æ–º–∏–ª–∫–∞:', err);
      alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT');
    });
}
