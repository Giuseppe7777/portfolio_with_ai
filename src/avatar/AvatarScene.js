import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

/**
 * –°—Ç–≤–æ—Ä—é—î —Å—Ü–µ–Ω—É, –∫–∞–º–µ—Ä—É, —Ä–µ–Ω–¥–µ—Ä–µ—Ä —Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏
 * @param {HTMLElement} container - DOM-–µ–ª–µ–º–µ–Ω—Ç, –∫—É–¥–∏ –≤—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è –∫–∞–Ω–≤–∞—Å
 * @returns {Object} - –æ–±'—î–∫—Ç –∑ scene, camera, renderer, controls
 */
export function setupScene(container) {
  //  –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏ (—Å–µ—Ä–µ–¥–æ–≤–∏—â–µ, –∫—É–¥–∏ –º–∏ –¥–æ–¥–∞—î–º–æ –æ–±'—î–∫—Ç–∏)
  const scene = new THREE.Scene();

  //  –ö–∞–º–µ—Ä–∞ ‚Äî —Ç–æ—á–∫–∞ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è
  const camera = new THREE.PerspectiveCamera(
    45,
    container.clientWidth / container.clientHeight,
    0.1,
    1000
  );
  camera.position.set(0, 1.8, 3); // —Ç—Ä–æ—Ö–∏ –≤–∏—â–µ —Ä—ñ–≤–Ω—è –æ—á–µ–π

  //  –†–µ–Ω–¥–µ—Ä–µ—Ä ‚Äî –¥–≤–∏–≥—É–Ω, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —Å—Ü–µ–Ω—É –Ω–∞ –µ–∫—Ä–∞–Ω
  const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
  renderer.shadowMap.enabled = true;
  renderer.shadowMap.type = THREE.PCFSoftShadowMap;
  renderer.setSize(container.clientWidth, container.clientHeight);
  renderer.setPixelRatio(window.devicePixelRatio);
  container.appendChild(renderer.domElement);

  //  –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ ‚Äî –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∫–µ—Ä—É–≤–∞—Ç–∏ –∫–∞–º–µ—Ä–æ—é –º–∏—à–∫–æ—é
  const controls = new OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true; 
  controls.dampingFactor = 0.1;
  controls.enablePan = false;    
  controls.enableZoom = false;   
  controls.target.set(0, 1, 0);  
  controls.update();

  const ground = new THREE.Mesh(
  new THREE.PlaneGeometry(10, 10),
  new THREE.ShadowMaterial({ opacity: 0.2 })
  );
  ground.rotation.x = -Math.PI / 2;
  ground.position.y = 0; // –º–æ–∂–µ—à –ø—ñ–¥–Ω—è—Ç–∏/–æ–ø—É—Å—Ç–∏—Ç–∏ —è–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  ground.receiveShadow = true;
  scene.add(ground);

  //  –°–≤—ñ—Ç–ª–æ ‚Äî –æ—Å–≤—ñ—Ç–ª—é—î —Å—Ü–µ–Ω—É, –≤–∞–∂–ª–∏–≤–æ –¥–ª—è 3D
  scene.add(new THREE.HemisphereLight(0xffffff, 0x222222, 0.6));

  const keyLight = new THREE.DirectionalLight(0xffffff, 3);
  keyLight.position.set(2, 4, 5);
  keyLight.castShadow = true;
  keyLight.shadow.mapSize.width = 1024;
  keyLight.shadow.mapSize.height = 1024;
  keyLight.shadow.camera.near = 0.5;
  keyLight.shadow.camera.far = 20;
  scene.add(keyLight);

  const rimLight = new THREE.DirectionalLight(0xffffff, 1.5);
  rimLight.position.set(-2, 3, -3);
  scene.add(rimLight);

  scene.add(new THREE.AmbientLight(0xffffff, 0.3));

  //  –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–æ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
  window.addEventListener('resize', () => {
    camera.aspect = container.clientWidth / container.clientHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(container.clientWidth, container.clientHeight);
  });

  console.log('üñºÔ∏è renderer.domElement –≤—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è –≤:', container);
  
  //  –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –∫–ª—é—á–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
  return { scene, camera, renderer, controls };

}
