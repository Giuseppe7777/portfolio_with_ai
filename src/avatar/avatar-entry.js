// src/avatar/avatar-entry.js
import { startIntroSequence } from './startIntroSequence.js';
import { preloadAvatarModel } from './preloadAvatarModel.js';
import { playVoiceStreamWithMimic } from "../voice/playVoiceStreamWithMimic.js";
import { sendToGPT } from "./listenUserSpeech.js";
import { playLimitMessageWithAvatar } from "./playLimitMessageWithAvatar.js";
import {
  setConversationActive,
  getConversationActive,
  currentAudio,
  currentMixer,
  micStream,
  setCurrentAudio,
  setCurrentMixer,
  setMicStream,
  getRenderLoopId,
  getFinishTimerId,
  getScene,
  setScene,
  getRenderer,
  setRenderer,
  getAudioContext,
  setQuestionCount,
  getQuestionCountLS,
  setQuestionCountLS,
  getLastSessionLS
} from './state.js';

const button = document.getElementById('talk-button');
const container = document.getElementById('avatar-container');
const photo = document.getElementById('avatar-photo');

function is24HoursPassed(lastTimestamp) {
  const MS_IN_DAY = 24 * 60 * 60 * 1000;
  return (Date.now() - lastTimestamp) >= MS_IN_DAY;
}

preloadAvatarModel().then((data) => {
  window.preloadedAvatarData = data;
  console.log('üöÄ Avatar preloaded');
});

// üîÅ –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç –∑–∞–ø—É—Å–∫—É
let isLaunching = false;

if (button && container && photo) {
  button.addEventListener('click', () => {
    const isActive = getConversationActive();

    // ‚õî –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Å—Ü–µ–Ω—É –ø–æ–≤—Ç–æ—Ä–Ω–æ, –ø–æ–∫–∏ –≤–æ–Ω–∞ —â–µ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è
    if (!isActive && isLaunching) return;

    // ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
    if (!isActive) {

      const questionCountLS = getQuestionCountLS();
      const lastSession = getLastSessionLS();

      console.log('[AVATAR ENTRY] questionCountLS:', questionCountLS, 'lastSession:', lastSession);

      if (
        questionCountLS >= 6 &&
        lastSession > 0 &&
        !is24HoursPassed(lastSession)
      ) {
        console.log('[AVATAR ENTRY] –õ—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç–∞–Ω—å –Ω–µ –º–∏–Ω—É–≤, –±–ª–æ–∫—É—é –∑–∞–ø—É—Å–∫!');
        (async () => {
          const lastLangPrompt = `
            Please detect the language of the user in previous conversations.
            Just use that language ‚Äî and only that language ‚Äî to politely say that the question limit for today is reached, and the user can try again in 24 hours. Thank them warmly for the conversation.
            Be brief but friendly.
          `;
          const { answer } = await sendToGPT(lastLangPrompt);

          // WOW-–µ—Ñ–µ–∫—Ç ‚Äî –∞–≤–∞—Ç–∞—Ä –æ–∑–≤—É—á—É—î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
          await playLimitMessageWithAvatar(answer);
        })();
        return;

      }

      // –Ø–∫—â–æ –ª—ñ–º—ñ—Ç –±—É–≤, –∞–ª–µ –≤–∂–µ –º–∏–Ω—É–ª–æ 24 –≥–æ–¥–∏–Ω–∏ ‚Äî —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
      if (questionCountLS >= 6 && is24HoursPassed(lastSession)) {
        setQuestionCountLS(0);
        setQuestionCount(0);
        console.log('[AVATAR ENTRY] –ú–∏–Ω—É–ª–æ 24 –≥–æ–¥–∏–Ω–∏, —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫.');
      }

      isLaunching = true;
      setConversationActive(true);
      photo.classList.add('loading');
      button.textContent = 'Stop Talk';

      setQuestionCount(0);
      setQuestionCountLS(0);

      setTimeout(() => {
        startIntroSequence(container);
      }, 300);
    }

    // ‚èπ –ó—É–ø–∏–Ω–∫–∞
    else {
      stopConversation();
    }
  });
} else {
  console.error('talk-button –∞–±–æ avatar-container –∞–±–æ avatar-photo –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ DOM');
}

export function stopConversation() {
  setConversationActive(false);
  isLaunching = false;

  // ‚è± –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä
  const timeoutId = getFinishTimerId();
  if (timeoutId) clearTimeout(timeoutId);

  // ‚èπ –ó—É–ø–∏–Ω–∏—Ç–∏ requestAnimationFrame
  const loopId = getRenderLoopId();
  if (loopId) cancelAnimationFrame(loopId);

  // üßº –í–∏–¥–∞–ª–∏—Ç–∏ canvas
  const canvas = container.querySelector('canvas');
  if (canvas) canvas.remove();

  // üì∑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ–æ—Ç–æ
  console.log('[STOP] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ–æ—Ç–æ ‚Äî remove fade-out');
  photo.classList.remove('fade-out');
  photo.classList.remove('loading');
  container.classList.remove('fade-in');
  container.innerHTML = '';
  button.textContent = 'Talk with me';

  // üßº –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ü–µ–Ω—É
  const scene = getScene();
  if (scene) {
    scene.traverse((object) => {
      // üí£ –û—á–∏—Å—Ç–∏—Ç–∏ –≥–µ–æ–º–µ—Ç—Ä—ñ—é
      if (object.geometry) {
        object.geometry.dispose();
      }

      // üí£ –û—á–∏—Å—Ç–∏—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
      if (object.material) {
        if (Array.isArray(object.material)) {
          object.material.forEach(m => m.dispose());
        } else {
          object.material.dispose();
        }
      }

      // üí£ –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä–∏ (—è–∫—â–æ –Ω–∞–ø—Ä—è–º—É –≤ –æ–±'—î–∫—Ç—ñ ‚Äî –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Ä–µ—á–µ–π)
      if (object.texture) {
        object.texture.dispose();
      }
    });

    // üîÅ –ü–æ—Ç—ñ–º —Ñ—ñ–∑–∏—á–Ω–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ –∑—ñ —Å—Ü–µ–Ω–∏
    while (scene.children.length > 0) {
      scene.remove(scene.children[0]);
    }

    setScene(null);
  }


  // üßº Dispose —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
  const renderer = getRenderer();
  if (renderer) {
    // üí• –í–∏–¥–∞–ª–∏—Ç–∏ canvas –ø–µ—Ä–µ–¥ dispose
    const canvas = renderer.domElement;
    if (canvas && canvas.parentNode) {
      canvas.parentNode.removeChild(canvas);
    }

    renderer.dispose();
    setRenderer(null);
  }

  // üé§ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
  const micBtn = document.getElementById('mic-permission-btn');
  if (micBtn) micBtn.remove();

  // üîá –ó—É–ø–∏–Ω–∏—Ç–∏ –∞—É–¥—ñ–æ
  if (currentAudio && !currentAudio.paused) {
    currentAudio.pause();
    currentAudio.currentTime = 0;
    setCurrentAudio(null);
  }

  // üîï –ó—É–ø–∏–Ω–∏—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó
  if (currentMixer) {
    currentMixer.stopAllAction();
    setCurrentMixer(null);
  }

  // üéôÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω
  if (micStream) {
    micStream.getTracks().forEach(track => track.stop());
    setMicStream(null);
  }

    // üîá –ó–∞–∫—Ä–∏—Ç–∏ AudioContext, —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π
  const ctx = getAudioContext();
  if (ctx && ctx.state !== 'closed') {
    ctx.close();
  }
}

