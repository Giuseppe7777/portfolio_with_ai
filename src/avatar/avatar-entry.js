// src/avatar/avatar-entry.js
import { startIntroSequence } from './startIntroSequence.js';
import { preloadAvatarModel } from './preloadAvatarModel.js';
import { playVoiceStreamWithMimic } from "../voice/playVoiceStreamWithMimic.js";
import { sendToGPT } from "./listenUserSpeech.js";
import { playLimitMessageWithAvatar } from "./playLimitMessageWithAvatar.js";
import { resetSpeechState } from './listenUserSpeech.js';
import {
  setConversationActive,
  getConversationActive,
  currentAudio,
  currentMixer,
  micStream,
  setCurrentAudio,
  setCurrentMixer,
  setMicStream,
  getRenderLoopId,
  getFinishTimerId,
  getScene,
  setScene,
  getRenderer,
  setRenderer,
  getAudioContext,
  setQuestionCount,
  closeAudioContext
} from './state.js';

const button = document.getElementById('talk-button');
const container = document.getElementById('avatar-container');
const photo = document.getElementById('avatar-photo');

function unlockAudioForSafari() {
  const a = new Audio();
  a.muted = true;
  const playPromise = a.play();
  if (playPromise) {
    playPromise.catch(() => {}).finally(() => {
      a.pause();
      a.remove();
    });
  }
}

preloadAvatarModel().then((data) => {
  window.preloadedAvatarData = data;
  console.log('üöÄ Avatar preloaded');
});

// üîÅ –õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç –∑–∞–ø—É—Å–∫—É
let isLaunching = false;

// --- –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ---
async function checkLimitOnBackend() {
  const resp = await fetch(`${BASE_URL}/php/checkLimit.php`, { method: 'GET' });
  if (!resp.ok) return { status: 'error' };
  try {
    return await resp.json(); // {status: 'ok'|'limit', message: '...'}
  } catch {
    return { status: 'error' };
  }
}

if (button && container && photo) {
  button.addEventListener('click', async () => {
    unlockAudioForSafari();
    const isActive = getConversationActive();

    // ‚õî –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Å—Ü–µ–Ω—É –ø–æ–≤—Ç–æ—Ä–Ω–æ, –ø–æ–∫–∏ –≤–æ–Ω–∞ —â–µ —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è
    if (!isActive && isLaunching) return;

    // ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
    if (!isActive) {
      // --- –û—Å—å —Ç—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä–≤–µ—Ä ---
      const limitInfo = await checkLimitOnBackend();

      if (limitInfo.status === 'limit') {
        console.log('[AVATAR ENTRY] –°–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ª—ñ–º—ñ—Ç, –±–ª–æ–∫—É—é –∑–∞–ø—É—Å–∫!');
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤–∏–π prompt –Ω–∞ GPT, –∞–±–æ –±–µ—Ä–µ–º–æ –≥–æ—Ç–æ–≤–∏–π message —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞
        const lastLangPrompt = `
          Please detect the language of the user in previous conversations.
          Just use that language ‚Äî and only that language ‚Äî to politely say that the question limit for today is reached, and the user can try again in 24 hours. Thank them warmly for the conversation.
          Be brief but friendly.
        `;

        // –Ø–∫—â–æ —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∂–µ –≥–æ—Ç–æ–≤–∏–π message ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –π–æ–≥–æ:
        const answer = limitInfo.message || (await sendToGPT(lastLangPrompt)).answer;

        // WOW-–µ—Ñ–µ–∫—Ç ‚Äî –∞–≤–∞—Ç–∞—Ä –æ–∑–≤—É—á—É—î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        await playLimitMessageWithAvatar(answer);
        return;
      }

      // --- –Ø–∫—â–æ –ª—ñ–º—ñ—Ç –Ω–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π ---
      isLaunching = true;
      setConversationActive(true);
      photo.classList.add('loading');
      button.textContent = 'Stop Talk';

      setQuestionCount(0);

      setTimeout(() => {
        startIntroSequence(container);
      }, 300);
    }

    // ‚èπ –ó—É–ø–∏–Ω–∫–∞
    else {
      stopConversation();
    }
  });
} else {
  console.error('talk-button –∞–±–æ avatar-container –∞–±–æ avatar-photo –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ DOM');
}

export function stopConversation() {
  resetSpeechState();
  setConversationActive(false);
  isLaunching = false;

  // ‚è± –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä
  const timeoutId = getFinishTimerId();
  if (timeoutId) clearTimeout(timeoutId);

  // ‚èπ –ó—É–ø–∏–Ω–∏—Ç–∏ requestAnimationFrame
  const loopId = getRenderLoopId();
  if (loopId) cancelAnimationFrame(loopId);

  // –í–∏–¥–∞–ª–∏—Ç–∏ canvas
  const canvas = container.querySelector('canvas');
  if (canvas) canvas.remove();

  // üì∑ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ñ–æ—Ç–æ
  console.log('[STOP] –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ–æ—Ç–æ ‚Äî remove fade-out');
  photo.classList.remove('fade-out');
  photo.classList.remove('loading');
  container.classList.remove('fade-in');
  container.innerHTML = '';
  button.textContent = 'Talk with me';

  // –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ü–µ–Ω—É
  const scene = getScene();
  if (scene) {
    scene.traverse((object) => {
      // üí£ –û—á–∏—Å—Ç–∏—Ç–∏ –≥–µ–æ–º–µ—Ç—Ä—ñ—é
      if (object.geometry) {
        object.geometry.dispose();
      }

      // üí£ –û—á–∏—Å—Ç–∏—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
      if (object.material) {
        if (Array.isArray(object.material)) {
          object.material.forEach(m => m.dispose());
        } else {
          object.material.dispose();
        }
      }

      // üí£ –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç—É—Ä–∏ (—è–∫—â–æ –Ω–∞–ø—Ä—è–º—É –≤ –æ–±'—î–∫—Ç—ñ ‚Äî –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Ä–µ—á–µ–π)
      if (object.texture) {
        object.texture.dispose();
      }
    });

    // –ü–æ—Ç—ñ–º —Ñ—ñ–∑–∏—á–Ω–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ –∑—ñ —Å—Ü–µ–Ω–∏
    while (scene.children.length > 0) {
      scene.remove(scene.children[0]);
    }

    setScene(null);
  }


  // Dispose —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
  const renderer = getRenderer();
  if (renderer) {
    // üí• –í–∏–¥–∞–ª–∏—Ç–∏ canvas –ø–µ—Ä–µ–¥ dispose
    const canvas = renderer.domElement;
    if (canvas && canvas.parentNode) {
      canvas.parentNode.removeChild(canvas);
    }

    renderer.dispose();
    setRenderer(null);
  }

  // –í–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
  const micBtn = document.getElementById('mic-permission-btn');
  if (micBtn) micBtn.remove();

  // –ó—É–ø–∏–Ω–∏—Ç–∏ –∞—É–¥—ñ–æ
  if (currentAudio && !currentAudio.paused) {
    currentAudio.pause();
    currentAudio.currentTime = 0;
    setCurrentAudio(null);
  }

  // –ó—É–ø–∏–Ω–∏—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó
  if (currentMixer) {
    currentMixer.stopAllAction();
    setCurrentMixer(null);
  }

  // –ó—É–ø–∏–Ω–∏—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω
  if (micStream) {
    micStream.getTracks().forEach(track => track.stop());
    setMicStream(null);
  }

    // –ó–∞–∫—Ä–∏—Ç–∏ AudioContext, —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π
  closeAudioContext();
}
