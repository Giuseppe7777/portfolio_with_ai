import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
// import { saveAs } from 'file-saver'; // —è–∫—â–æ —Ç—Ä–µ–±–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫—ñ—Å—Ç–∫–∏

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î GLB –º–æ–¥–µ–ª—å –∞–≤–∞—Ç–∞—Ä–∞ —Ç–∞ –¥–æ–¥–∞—î –¥–æ —Å—Ü–µ–Ω–∏
 * @param {THREE.Scene} scene - —Å—Ü–µ–Ω–∞, –∫—É–¥–∏ –¥–æ–¥–∞—î—Ç—å—Å—è –∞–≤–∞—Ç–∞—Ä
 * @returns {Promise<{ avatar: THREE.Group, mixer: THREE.AnimationMixer, faceMesh: THREE.Mesh }>} 
 */
export function loadAvatarModel(scene) {
  return new Promise((resolve, reject) => {
    const loader = new GLTFLoader();
    loader.load(
      '/models/model-avatar-5-1.glb',
      (gltf) => {
        const avatar = gltf.scene;
        avatar.position.set(0, -3, -10);
        avatar.rotation.y = THREE.MathUtils.degToRad(-5);
        scene.add(avatar);

        console.log('‚úÖ GLB –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, avatar:', avatar);

        // üî∏ –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫—ñ—Å—Ç–æ–∫ ‚Äî –ª–∏—à–µ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        const allBones = [];
        gltf.scene.traverse((object) => {
          if (object.type === 'Bone') {
            allBones.push({
              name: object.name,
              position: { ...object.position },
              rotation: { ...object.rotation },
              scale: { ...object.scale },
              quaternion: { ...object.quaternion },
            });
          }
        });
        // const boneDataBlob = new Blob([JSON.stringify(allBones, null, 2)], { type: 'application/json' });
        // saveAs(boneDataBlob, 'bones.json');

        // üî∏ –ê–Ω—ñ–º–∞—Ü—ñ—è WalkAndWave ‚Äî –≥–æ—Ç—É—î–º–æ, –∞–ª–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ
        const mixer = new THREE.AnimationMixer(avatar);
        const clip = gltf.animations[0];
        const action = mixer.clipAction(clip);
        action.reset();
        action.setLoop(THREE.LoopOnce);
        action.clampWhenFinished = true;
        action.play();
        action.paused = true;

        console.log('üéûÔ∏è –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞–Ω—ñ–º–∞—Ü—ñ—ó WalkAndWave:', clip.duration, '—Å–µ–∫—É–Ω–¥');

        // üî∏ FaceMesh –¥–ª—è –º—ñ–º—ñ–∫–∏
        const faceMesh = avatar.getObjectByName('Body_1');

        // Shape Keys ==========================================================
        
        // if (faceMesh && faceMesh.morphTargetDictionary) {
        //   console.log('–î–æ—Å—Ç—É–ø–Ω—ñ shape keys:', Object.keys(faceMesh.morphTargetDictionary));
        // }
        
        // Shape Keys ==========================================================

        resolve({ avatar, mixer, faceMesh });
      },
      undefined,
      (error) => {
        console.error('GLB load error', error);
        reject(error);
      }
    );
  });
}

