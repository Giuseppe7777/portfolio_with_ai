import * as THREE from 'three';

export function gestureExplainWithHand(avatar) {
  const rArm = avatar.getObjectByName('mixamorigRightArm');
  const rFore = avatar.getObjectByName('mixamorigRightForeArm');
  const rHand = avatar.getObjectByName('mixamorigRightHand');

  if (!rArm || !rFore || !rHand) return;

  rArm.rotation.order = 'XYZ';
  rFore.rotation.order = 'XYZ';
  rHand.rotation.order = 'XYZ';

  const targetArm  = new THREE.Euler(0.969, 0.3236, -0.619);
  const targetFore = new THREE.Euler(1.218, 1.148, 0.082);
  const targetHand = new THREE.Euler(0.813, -0.914, 0.901);

  const startPose = {
    arm: new THREE.Euler(0.969, 0.460, -0.219),
    fore: new THREE.Euler(0.418, 0.248, 0.082),
    hand: new THREE.Euler(0.813, -0.914, 0.901),
  };

  // === –§–ê–ó–ê 1: –º º—è–∫–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ä—É–∫—É –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó –ø–æ–∑–∏
  function approachStartPose() {
    const steps = 15;
    let frame = 0;

    const fromArm = rArm.rotation.clone();
    const fromFore = rFore.rotation.clone();
    const fromHand = rHand.rotation.clone();

    function animate() {
      if (frame < steps) {
        rArm.rotation.x = THREE.MathUtils.lerp(fromArm.x, startPose.arm.x, frame / steps);
        rArm.rotation.y = THREE.MathUtils.lerp(fromArm.y, startPose.arm.y, frame / steps);
        rArm.rotation.z = THREE.MathUtils.lerp(fromArm.z, startPose.arm.z, frame / steps);

        rFore.rotation.x = THREE.MathUtils.lerp(fromFore.x, startPose.fore.x, frame / steps);
        rFore.rotation.y = THREE.MathUtils.lerp(fromFore.y, startPose.fore.y, frame / steps);
        rFore.rotation.z = THREE.MathUtils.lerp(fromFore.z, startPose.fore.z, frame / steps);

        rHand.rotation.x = THREE.MathUtils.lerp(fromHand.x, startPose.hand.x, frame / steps);
        rHand.rotation.y = THREE.MathUtils.lerp(fromHand.y, startPose.hand.y, frame / steps);
        rHand.rotation.z = THREE.MathUtils.lerp(fromHand.z, startPose.hand.z, frame / steps);

        frame++;
        requestAnimationFrame(animate);
      } else {
        raiseAndRotate();
      }
    }

    animate();
  }

  // === –§–ê–ó–ê 2: –ø—ñ–¥–Ω—è—Ç—Ç—è —Ä—É–∫–∏
  function raiseAndRotate() {
    const steps = 60;
    let frame = 0;

    const fromArm = startPose.arm;
    const fromFore = startPose.fore;
    const fromHand = startPose.hand;

    function animate() {
      if (frame < steps) {
        rArm.rotation.x = THREE.MathUtils.lerp(fromArm.x, targetArm.x, frame / steps);
        rArm.rotation.y = THREE.MathUtils.lerp(fromArm.y, targetArm.y, frame / steps);
        rArm.rotation.z = THREE.MathUtils.lerp(fromArm.z, targetArm.z, frame / steps);

        rFore.rotation.x = THREE.MathUtils.lerp(fromFore.x, targetFore.x, frame / steps);
        rFore.rotation.y = THREE.MathUtils.lerp(fromFore.y, targetFore.y, frame / steps);
        rFore.rotation.z = THREE.MathUtils.lerp(fromFore.z, targetFore.z, frame / steps);

        rHand.rotation.copy(fromHand); // –Ω–µ –∑–º—ñ–Ω—é—î–º–æ –∫–∏—Å—Ç—å

        frame++;
        requestAnimationFrame(animate);
      } else {
        orbitForeArm();
      }
    }

    animate();
  }

  // === –§–ê–ó–ê 3: –æ–±–µ—Ä—Ç –ø–µ—Ä–µ–¥–ø–ª—ñ—á—á—è
  function orbitForeArm() {
    const radius = 0.3;
    const speed = 0.05;
    let t = 0;

    const originalQuat = rFore.quaternion.clone();

    const spin = () => {
      t += speed;
      const angle = t;

      const axis = new THREE.Vector3(
        Math.sin(angle),
        0,
        Math.cos(angle)
      ).normalize();

      const quat = new THREE.Quaternion();
      quat.setFromAxisAngle(axis, 0.2);
      const resultQuat = originalQuat.clone().multiply(quat);

      rFore.quaternion.copy(resultQuat);

      if (t < Math.PI * 3) { // üîÅ 1.5 –æ–±–µ—Ä—Ç–∞
        requestAnimationFrame(spin);
      } else {
        resetForeArm();
      }
    };

    spin();
  }

  // === –§–Ü–ù–ê–õ: –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É –ø–æ–∑—É
  function resetForeArm() {
    const steps = 40;
    let frame = 0;

    const startArm = rArm.rotation.clone();
    const startFore = rFore.rotation.clone();
    const startHand = rHand.rotation.clone();

    const neutralArm  = new THREE.Euler(0.969, 0.460, -0.219);
    const neutralFore = new THREE.Euler(0.418, 0.248, 0.082);
    const neutralHand = new THREE.Euler(0.813, -0.914, 0.901);

    const animate = () => {
      if (frame < steps) {
        rArm.rotation.x = THREE.MathUtils.lerp(startArm.x, neutralArm.x, frame / steps);
        rArm.rotation.y = THREE.MathUtils.lerp(startArm.y, neutralArm.y, frame / steps);
        rArm.rotation.z = THREE.MathUtils.lerp(startArm.z, neutralArm.z, frame / steps);

        rFore.rotation.x = THREE.MathUtils.lerp(startFore.x, neutralFore.x, frame / steps);
        rFore.rotation.y = THREE.MathUtils.lerp(startFore.y, neutralFore.y, frame / steps);
        rFore.rotation.z = THREE.MathUtils.lerp(startFore.z, neutralFore.z, frame / steps);

        rHand.rotation.x = THREE.MathUtils.lerp(startHand.x, neutralHand.x, frame / steps);
        rHand.rotation.y = THREE.MathUtils.lerp(startHand.y, neutralHand.y, frame / steps);
        rHand.rotation.z = THREE.MathUtils.lerp(startHand.z, neutralHand.z, frame / steps);

        frame++;
        requestAnimationFrame(animate);
      }
    };

    animate();
  }

  // ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–∞–∑—É 1
  approachStartPose();
}



window.poseControl = {
  set(boneName, x, y, z) {
    const bone = avatar.getObjectByName(boneName);
    if (!bone) return console.warn(`‚ùå –ö—ñ—Å—Ç–∫–∞ ${boneName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
    bone.rotation.set(x, y, z);
    console.log(`‚úÖ ${boneName} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚Üí X=${x.toFixed(3)}, Y=${y.toFixed(3)}, Z=${z.toFixed(3)}`);
  },
  get(boneName) {
    const bone = avatar.getObjectByName(boneName);
    if (!bone) return console.warn(`‚ùå –ö—ñ—Å—Ç–∫–∞ ${boneName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
    const r = bone.rotation;
    console.log(`üìç ${boneName} ‚Üí X=${r.x.toFixed(3)}, Y=${r.y.toFixed(3)}, Z=${r.z.toFixed(3)}`);
  },
  list() {
    const bones = {};
    avatar.traverse(obj => {
      if (obj.isBone) bones[obj.name] = obj;
    });
    console.log("ü¶¥ –î–æ—Å—Ç—É–ø–Ω—ñ –∫—ñ—Å—Ç–∫–∏:");
    console.table(Object.keys(bones));
  }
};


// import('/src/gestures/gestureExplainWithHand.js').then(m => m.gestureExplainWithHand(avatar));

/*
poseControl.set('mixamorigRightShoulder', -0.2, 0.4, 0.2);     // –ø–ª–µ—á–µ
poseControl.set('mixamorigRightArm',      -0.6, 1.0, -0.3);     // –ø–ª–µ—á–æ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞
poseControl.set('mixamorigRightForeArm',  -1.0, 0.2,  0.1);     // –ø–µ—Ä–µ–¥–ø–ª—ñ—á—á—è
poseControl.set('mixamorigRightHand',      0.3, 0.3,  0.5);     // –∫–∏—Å—Ç—å

–¢–∏–ø–æ–≤—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è:
–†–µ–∞–ª—å–Ω—ñ –ø–æ–≤–æ—Ä–æ—Ç–∏ —Ä—É–∫ —ñ —Å—É–≥–ª–æ–±—ñ–≤: -1.5 ‚Üí +1.5

–ó–≥–∏–Ω–∞–Ω–Ω—è –ª—ñ–∫—Ç—è (ForeArm): -1.3 ‚Üí 0

–†—É—Ö –ø–ª–µ—á–∞ –≤–ø–µ—Ä–µ–¥ (Arm, Shoulder): -1.0 ‚Üí +1.0

–ö–∏—Å—Ç—å: -1.0 ‚Üí +1.0 –Ω–∞ –∫–æ–∂–Ω—ñ–π –æ—Å—ñ


poseControl.get('mixamorigRightArm');
poseControl.get('mixamorigRightForeArm');
poseControl.get('mixamorigRightHand');

idleMimic.js:177 üìç mixamorigRightArm ‚Üí X=0.969, Y=0.460, Z=-0.219
idleMimic.js:177 üìç mixamorigRightForeArm ‚Üí X=0.418, Y=0.248, Z=0.082
idleMimic.js:177 üìç mixamorigRightHand ‚Üí X=0.813, Y=-0.914, Z=0.901

correct - poseControl.set('mixamorigRightArm', 0.969, 0.3236, -0.619);
poseControl.set('mixamorigRightForeArm', 1.218, 1.148, 0.082); 

*/