// public/js/avatar-realtime.js

let pc, dc;

async function startRealtimeAvatar() {
  console.log('[üîÅ INIT] Requesting session token from PHP');

  const tokenRes = await fetch('/php/realtime-session-token.php');
  const tokenData = await tokenRes.json();
  const clientSecret = tokenData.client_secret?.value;

  if (!clientSecret) {
    console.error('[‚õî ERROR] No client_secret received');
    return;
  }

  console.log('[üîê TOKEN]', clientSecret);

  // 1. –°—Ç–≤–æ—Ä—é—î–º–æ WebRTC peer connection
  pc = new RTCPeerConnection();

  // 2. –û—Ç—Ä–∏–º—É—î–º–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω
  const mic = await navigator.mediaDevices.getUserMedia({ audio: true });
  pc.addTrack(mic.getTracks()[0]);

  // 3. –°—Ç–≤–æ—Ä—é—î–º–æ <audio> –¥–ª—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è GPT
  const audioEl = document.createElement('audio');
  audioEl.autoplay = true;
  pc.ontrack = (e) => {
    console.log('[üéß AUDIO STREAM RECEIVED]');
    audioEl.srcObject = e.streams[0];
  };

  // 4. –°—Ç–≤–æ—Ä—é—î–º–æ data channel –¥–ª—è –ø–æ–¥—ñ–π GPT (—Ç–µ–∫—Å—Ç, —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–æ—â–æ)
  dc = pc.createDataChannel("oai-events");
  dc.onmessage = (e) => {
    const msg = JSON.parse(e.data);
    console.log('[üì• EVENT]', msg);

    if (msg.type === 'response.text.delta') {
      console.log('[üß† TEXT]', msg.delta?.value);
    }

    if (msg.type === 'response.audio.delta') {
      console.log('[üó£Ô∏è AUDIO CHUNK]', msg.delta);
    }
  };

  // 5. –ì–æ—Ç—É—î–º–æ SDP
  const offer = await pc.createOffer();
  await pc.setLocalDescription(offer);

  const baseUrl = "https://api.openai.com/v1/realtime";
  const model = "gpt-4o-realtime-preview-2024-12-17";

  const sdpRes = await fetch(`${baseUrl}?model=${model}`, {
    method: "POST",
    body: offer.sdp,
    headers: {
      Authorization: `Bearer ${clientSecret}`,
      "Content-Type": "application/sdp",
    },
  });

  const answer = {
    type: "answer",
    sdp: await sdpRes.text(),
  };

  await pc.setRemoteDescription(answer);

  console.log('[‚úÖ CONNECTED] Realtime GPT session ready.');
}
